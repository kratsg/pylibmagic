name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
    - master
    - main
    - develop

jobs:
  pre-commit:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
    - uses: pre-commit/action@v3.0.0
      with:
        extra_args: --hook-stage manual --all-files
    - name: Run PyLint
      run: |
        echo "::add-matcher::$GITHUB_WORKSPACE/.github/matchers/pylint.json"
        pipx run nox -s pylint

  checks:
    name: Check Python ${{ matrix.python-version }} on ${{ matrix.sys.os }}
    runs-on: ${{ matrix.sys.os }}
    continue-on-error: ${{ matrix.experimental }}
    needs: [pre-commit]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.10"]
        sys:
          - { os: ubuntu-latest, shell: bash }
          - { os: macos-latest, shell: bash }
        experimental: [false]

        include:
        - python-version: pypy-3.7
          sys: { os: ubuntu-latest, shell: bash }
          experimental: false
        - python-version: "3.9"
          sys: { os: windows-latest, shell: 'msys2 {0}' }
          experimental: true

    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
    - uses: actions/checkout@v2

    - uses: msys2/setup-msys2@v2
      if: matrix.sys.os == 'windows-latest'
      with:
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-autotools
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          mingw-w64-x86_64-python-pip
          python-setuptools
          mingw-w64-x86_64-python-pytest
          mingw-w64-x86_64-ninja
          git
          automake1.16
          automake-wrapper
          autoconf
          autoconf-wrapper
          libtool
          make

    - name: Install build tools (macos-latest)
      if: matrix.sys.os == 'macos-latest'
      run: brew install autoconf automake libtool

    - uses: actions/setup-python@v2
      if: matrix.sys.os != 'windows-latest'
      with:
        python-version: ${{ matrix.python-version }}

    - name: Check build tools
      run: |
        which cmake
        cmake --version
        which make
        make --version
        which autoreconf
        autoreconf --version
        which python
        python --version

    - name: Check CMake configuration
      run: |
        cmake -S . -B build
        rm -rf build

    - name: Install package
      if: matrix.sys.os != 'windows-latest'
      run: python -m pip install -e .[test]

    - name: Install package
      if: matrix.sys.os == 'windows-latest'
      run: |
        #export PATH="/mingw64/bin:/usr/bin:/bin:/usr/local/bin:/opt/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:$PATH"
        python -m pip install -e .[test]

    - name: Uninstall magic (linux)
      if: matrix.sys.os == 'ubuntu-latest'
      run: |
        sudo apt remove -y file libmagic-mgc libmagic1

    - name: Test package
      run: |
        python -m pytest -ra
        python -m pytest -ra -m 'isolate' tests/test_import.py
